# backend/main.py

from fastapi import FastAPI, HTTPException, UploadFile, File
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from backend import data_handler, catboost_model
import math, time, asyncio
import shutil
import json, os
from fastapi import Body

app = FastAPI(title="Well Monitoring")

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.mount("/static", StaticFiles(directory="frontend"), name="static")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã –ø–æ –µ—ë ID
wells_dynamic = {}

def simulate_dynamic_value(base_value, amplitude, period):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è,
    –∞–º–ø–ª–∏—Ç—É–¥—ã –∏ –ø–µ—Ä–∏–æ–¥–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π.
    """
    t = time.time()
    delta = abs(amplitude * math.sin(2 * math.pi * (t % period) / period))
    return round(base_value + delta, 4)

async def update_wells_dynamic():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥.
    –î–ª—è –∫–∞–∂–¥–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã –±–µ—Ä—ë–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (data_handler.get_all_wells())
    –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    global wells_dynamic
    while True:
        wells_df = data_handler.get_all_wells()
        for _, row in wells_df.iterrows():
            well_data = row.to_dict()
            well_id = well_data.get("‚Ññ —Å–∫–≤")  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            if well_id is None:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            q_teor_base = well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –∂–∏–¥- –∫–æ—Å—Ç–∏", 0)
            gas_factor_base = well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ì–§ –ø–≥", 0)
            p_zatr_base = well_data.get("P –∑–∞—Ç—Ä", 0)
            p_zab_base = well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –† –∑–∞–±", 0)
            oil_debit_base = well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –Ω–µ—Ñ—Ç–∏", 0)

            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            q_teor_dynamic = simulate_dynamic_value(q_teor_base, amplitude=1.5, period=60)
            gas_factor_dynamic = simulate_dynamic_value(gas_factor_base, amplitude=5, period=70)
            p_zatr_dynamic = simulate_dynamic_value(p_zatr_base, amplitude=1, period=80)
            p_zab_dynamic = simulate_dynamic_value(p_zab_base, amplitude=0.5, period=90)
            oil_debit_dynamic = simulate_dynamic_value(oil_debit_base, amplitude=0.25, period=50)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã
            wells_dynamic[well_id] = {
                "q_teor": q_teor_dynamic,
                "gas_factor": gas_factor_dynamic,
                "p_zatr": p_zatr_dynamic,
                "p_zab": p_zab_dynamic,
                "oil_debit": oil_debit_dynamic,
            }
        await asyncio.sleep(3)  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

SAVED_WELLS_FILE = "saved_wells.json"

def load_saved_wells():
    if os.path.exists(SAVED_WELLS_FILE):
        with open(SAVED_WELLS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_well_data(well):
    wells = load_saved_wells()
    wells.append(well)
    with open(SAVED_WELLS_FILE, "w", encoding="utf-8") as f:
        json.dump(wells, f)

@app.get("/saved_wells")
def get_saved_wells():
    return load_saved_wells()

@app.post("/save_well")
async def save_well(well: dict = Body(...)):
    save_well_data(well)
    return {"status": "ok"}

@app.on_event("startup")
async def startup_event():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    asyncio.create_task(update_wells_dynamic())

@app.get("/", response_class=HTMLResponse)
def read_index():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    try:
        with open("frontend/index.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content, status_code=200)
    except Exception as e:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: " + str(e))
    
@app.get("/map", response_class=HTMLResponse)
def read_map():
    try:
        with open("frontend/map.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content, status_code=200)
    except Exception as e:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: " + str(e))

@app.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    """
    try:
        upload_path = "uploaded_data.xls"  # –∏–º—è —Ñ–∞–π–ª–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(upload_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ data_handler
        data_handler.DATA_PATH = upload_path
        data_handler.reload_data()
        return {"filename": file.filename}
    except Exception as e:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: " + str(e))

@app.get("/predict/{well_id}")
def predict_well(well_id: str):  # –ø—É—Å—Ç—å –±—É–¥–µ—Ç str, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ
    well_id_stripped = well_id.strip()
    try:
        well_id_int = int(well_id_stripped)
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã")

    well = data_handler.get_well_by_id(well_id_int)
    if not well:
        raise HTTPException(status_code=404, detail="–°–∫–≤–∞–∂–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –í—Å—Ç–∞–≤–ª—è–µ–º dynamic, –µ—Å–ª–∏ –µ—Å—Ç—å
    dynamic = wells_dynamic.get(well_id_int, {})
    if dynamic:
        well["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –∂–∏–¥- –∫–æ—Å—Ç–∏"] = dynamic.get("q_teor", well.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –∂–∏–¥- –∫–æ—Å—Ç–∏"))
        well["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ì–§ –ø–≥"] = dynamic.get("gas_factor", well.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ì–§ –ø–≥"))
        well["P –∑–∞—Ç—Ä"] = dynamic.get("p_zatr", well.get("P –∑–∞—Ç—Ä"))
        well["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –† –∑–∞–±"] = dynamic.get("p_zab", well.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –† –∑–∞–±"))
        well["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –Ω–µ—Ñ—Ç–∏"] = dynamic.get("oil_debit", well.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –Ω–µ—Ñ—Ç–∏"))

    # üëá –ü—Ä–∏–≤–æ–¥–∏–º "‚Ññ —Å–∫–≤" –∫ —Å—Ç—Ä–æ–∫–µ ‚Äî –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç string –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    well["‚Ññ —Å–∫–≤"] = str(well_id_int)

    probability = catboost_model.predict(well)
    return {"well_id": well_id_int, "probability": probability}

@app.get("/wells")
def get_all_wells():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–≤–∞–∂–∏–Ω —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–µ—Å–∫–æ–ø—Ä–æ—è–≤–ª–µ–Ω–∏—è.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è,
    –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥.
    """
    wells_df = data_handler.get_all_wells()
    wells_list = []
    
    for _, row in wells_df.iterrows():
        well_data = row.to_dict()
        well_id = well_data.get("‚Ññ —Å–∫–≤")
        if well_id is None:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        dynamic = wells_dynamic.get(well_id, {})
        if dynamic:
            well_data["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –∂–∏–¥- –∫–æ—Å—Ç–∏"] = dynamic.get("q_teor", well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –∂–∏–¥- –∫–æ—Å—Ç–∏"))
            well_data["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ì–§ –ø–≥"] = dynamic.get("gas_factor", well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ì–§ –ø–≥"))
            well_data["P –∑–∞—Ç—Ä"] = dynamic.get("p_zatr", well_data.get("P –∑–∞—Ç—Ä"))
            well_data["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –† –∑–∞–±"] = dynamic.get("p_zab", well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –† –∑–∞–±"))
            well_data["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –Ω–µ—Ñ—Ç–∏"] = dynamic.get("oil_debit", well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –Ω–µ—Ñ—Ç–∏"))
        
        probability = catboost_model.predict(well_data)
        wells_list.append({
            "kust": well_data.get("–ö—É—Å—Ç"),
            "n_sk": well_id,
            "q_teor": well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –∂–∏–¥- –∫–æ—Å—Ç–∏"),
            "gas_factor": well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ì–§ –ø–≥"),
            "p_u": well_data.get("P –∑–∞—Ç—Ä"),
            "p_zab": well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –† –∑–∞–±"),
            "temp": well_data.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º Q –Ω–µ—Ñ—Ç–∏"),
            "probability": probability
        })
    
    return wells_list
